version: '3'

# networks:
#   default:
#     external: true
#     name: traefik-network

services:
  traefik.test:
    build:
      context: ./src/
      dockerfile: web.traefik.dockerfile
    hostname: traefik
    container_name: example-oidc-traefik
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # https://docs.traefik.io/routing/providers/docker/
    # https://docs.traefik.io/reference/dynamic-configuration/docker/
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.test`)
      - traefik.http.routers.traefik.entrypoints=http
      - traefik.http.routers.traefik.service=api@internal

  oidc-server.test:
    build:
      context: ./src/
      dockerfile: web.oidc.server.ids4.dockerfile
    hostname: oidc-server
    container_name: example-oidc-server
    labels:
      - traefik.enable=true
      - traefik.http.routers.oidc-server.rule=Host(`oidc-server.test`)
      - traefik.http.routers.oidc-server.entrypoints=http
      - traefik.http.services.oidc-server.loadbalancer.server.port=80

  oidc-client-hybrid.test:
    build:
      context: ./src/
      dockerfile: web.oidc.client.hybrid.dockerfile
    hostname: oidc-client-hybrid
    container_name: example-oidc-client-hybrid
    labels:
      - traefik.enable=true
      - traefik.http.routers.oidc-client-hybrid.rule=Host(`oidc-client-hybrid.test`)
      - traefik.http.routers.oidc-client-hybrid.entrypoints=http
      - traefik.http.services.oidc-client-hybrid.loadbalancer.server.port=80

  oidc-client-js.test:
    build:
      context: ./src/
      dockerfile: web.oidc.client.js.dockerfile
    hostname: oidc-client-js
    container_name: example-oidc-client-js
    labels:
      - traefik.enable=true
      - traefik.http.routers.oidc-client-js.rule=Host(`oidc-client-js.test`)
      - traefik.http.routers.oidc-client-js.entrypoints=http
      - traefik.http.services.oidc-client-js.loadbalancer.server.port=80

  oauth2-client-aspnetcore.test:
    build:
      context: ./src/
      dockerfile: web.oauth2.client.aspnetcore.dockerfile
    hostname: oauth2-client-aspnetcore
    container_name: example-oidc-oauth2-client-aspnetcore
    labels:
      - traefik.enable=true
      - traefik.http.routers.oauth2-client-aspnetcore.rule=Host(`oauth2-client-aspnetcore.test`)
      - traefik.http.routers.oauth2-client-aspnetcore.entrypoints=http
      - traefik.http.services.oauth2-client-aspnetcore.loadbalancer.server.port=80

  oauth2-resources-aspnetcore.test:
    build:
      context: ./src/
      dockerfile: web.oauth2.resources.aspnetcore.dockerfile
    hostname: oauth2-resources-aspnetcore
    container_name: example-oidc-oauth2-resources-aspnetcore
    depends_on:
      - oidc-server.test
    labels:
      - traefik.enable=true
      - traefik.http.routers.oauth2-resources-aspnetcore.rule=Host(`oauth2-resources-aspnetcore.test`)
      - traefik.http.routers.oauth2-resources-aspnetcore.entrypoints=http
      - traefik.http.services.oauth2-resources-aspnetcore.loadbalancer.server.port=80

  oauth2-resources-nodejs.test:
    build:
      context: ./src/
      dockerfile: web.oauth2.resources.nodejs.dockerfile
    hostname: oauth2-resources-nodejs
    container_name: example-oidc-oauth2-resources-nodejs
    depends_on:
      - oidc-server.test
    labels:
      - traefik.enable=true
      - traefik.http.routers.oauth2-resources-nodejs.rule=Host(`oauth2-resources-nodejs.test`)
      - traefik.http.routers.oauth2-resources-nodejs.entrypoints=http
      - traefik.http.services.oauth2-resources-nodejs.loadbalancer.server.port=80

  oauth2-resources-java.test:
    build:
      context: ./src/
      dockerfile: web.oauth2.resources.java.dockerfile
    hostname: oauth2-resources-java
    container_name: example-oidc-oauth2-resources-java
    depends_on:
      - oidc-server.test
    labels:
      - traefik.enable=true
      - traefik.http.routers.oauth2-resources-java.rule=Host(`oauth2-resources-java.test`)
      - traefik.http.routers.oauth2-resources-java.entrypoints=http
      - traefik.http.services.oauth2-resources-java.loadbalancer.server.port=80
